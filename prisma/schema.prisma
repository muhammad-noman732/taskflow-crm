generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String                   @id @default(uuid())
  username      String                   @unique
  email         String                   @unique
  password      String
  createdAt     DateTime                 @default(now())
  isVerified    Boolean                  @default(false)
  otpCode       String?
  otpExpiry     DateTime?
  isSuperAdmin  Boolean                  @default(false)
  invitations   Invitation[]
  memberships   OrganizationMembership[]
  clients       Client[]                 // For INVITED clients
}

model Organization {
  id          String                   @id @default(uuid())
  name        String                   @unique
  createdAt   DateTime                 @default(now())
  Client      Client[]
  invitations Invitation[]
  memberships OrganizationMembership[]
}

model OrganizationMembership {
  id             String       @id @default(uuid())
  role           OrgRole      @default(OWNER)
  userId         String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  projects       Project[]

  // here will be better than user as here member and organization are at one place 
 assignedTasks Task[]          @relation("TaskAssignees")
 createdTasks Task[]     @relation("TaskCreator")
  @@unique([userId, organizationId])
}

model Invitation {
  id             String       @id @default(uuid())
  email          String
  role           OrgRole
  token          String       @unique
  status         String       @default("PENDING")
  createdAt      DateTime     @default(now())
  expiresAt      DateTime
  organizationId String
  createdById    String
  createdBy      User         @relation(fields: [createdById], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([email, organizationId])
}

model Project {
  id           String                 @id @default(uuid())
  name         String
  description  String?
  createdAt    DateTime               @default(now())
  deadline     DateTime?
  updatedAt    DateTime               @updatedAt

  clientId     String?
  membershipId String
  client       Client?                @relation(fields: [clientId], references: [id])
  membership   OrganizationMembership @relation(fields: [membershipId], references: [id])
  tasks        Task[]
}


enum ClientType {
  CRM      // Business entity only
  INVITED  // Has login access
}

model Client {
  id             String       @id @default(uuid())
  name           String
  email          String?      // Make email optional for INVITED clients
  company        String?
  status         String       @default("ACTIVE")
  notes          String?
  
  // New fields for client types
  type           ClientType   @default(CRM)
  userId         String?      // Link to User if invited
  user           User?        @relation(fields: [userId], references: [id])
  
  // Existing fields
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  projects       Project[]
  createdAt      DateTime     @default(now())
}

model Task {
  id           String     @id @default(uuid())
  title        String
  description  String?
  status       TaskStatus @default(TODO)
  deadline     DateTime?
  projectId    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  project      Project    @relation(fields: [projectId], references: [id])
  
    // Who created the task (using membership for consistency)
  createdBy   String     // OrganizationMembership ID
  creator     OrganizationMembership @relation("TaskCreator", fields: [createdBy], references: [id])
  
  assignees    OrganizationMembership[]     @relation("TaskAssignees")
}

enum OrgRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  CLIENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

