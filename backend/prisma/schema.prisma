generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum OrgRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  CLIENT
}

enum ProjectRole {
  PM
  COLLABORATOR
  VIEWER
  CLIENT_VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectStatus{
   ACTIVE
   IN_PROGRESS
   COMPLETED
}     


enum ClientType {
  CRM      // Business entity only
  INVITED  // Has login access
}

enum PricingType {
  HOURLY      // Bill by hours worked
  FIXED       // Fixed project price
  RETAINER    // Monthly retainer
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}
// MODELS - Core functionality only
model User {
  id            String                   @id @default(uuid())
  username      String                   @unique
  email         String                   @unique
  password      String                   // Store hashed password
  avatarUrl     String?
  createdAt     DateTime                 @default(now())
  isVerified    Boolean                  @default(false)
  otpCode       String?
  otpExpiry     DateTime?
  resetLink     String?                  
  resetLinkExpiry DateTime?              
  isSuperAdmin  Boolean                  @default(false)

  // relations
  invitations     Invitation[]
  memberships     OrganizationMembership[]
  clients         Client[]                 // For INVITED clients
  projectMembers  ProjectMember[]
  taskAssignees   TaskAssignee[]
  comments        Comment[]
  attatchments    Attachment[]
  timeEntries     TimeEntry[]
  notifications   Notification[]
  messages        Message[] 
  channelMember   ChannelMember[]
}

model Organization {
  id          String                   @id @default(uuid())
  name        String                   @unique
  slug        String                   @unique
  logoUrl     String?
  createdAt   DateTime                 @default(now())
  
  // PRICING SETTINGS
  defaultHourlyRate Decimal?             @default(50.00)  // Company's standard billing rate
  currency         String               @default("USD")   // Company's default currency
  taxRate          Decimal?             @default(0.00)    // Default tax rate (0-100)
  
  // relations
  invitations Invitation[]
  memberships OrganizationMembership[]
  clients     Client[]
  projects    Project[]
  label      Label[]
  attatchments Attachment[]
  invoices  Invoice[]
  channel  Channel[]
}

model OrganizationMembership {
  id             String       @id @default(uuid())
  role           OrgRole      @default(OWNER)
  userId         String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  createdProjects Project[] @relation("ProjectCreator")
  tasks   Task[]  @relation("TaskCreator")
  @@unique([userId, organizationId])
}

model Invitation {
  id             String       @id @default(uuid())
  email          String
  role           OrgRole
  token          String       @unique
  status         String       @default("PENDING")
  createdAt      DateTime     @default(now())
  expiresAt      DateTime
  organizationId String
  createdById    String
  createdBy      User         @relation(fields: [createdById], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([email, organizationId])
}

model Client {
  id             String       @id @default(uuid())
  name           String
  email          String?      // Make email optional for INVITED clients
  company        String?
  status         String       @default("ACTIVE")
  notes          String?
  
  // New fields for client types
  type           ClientType   @default(CRM)
  userId         String?      // Link to User if invited
  user           User?        @relation(fields: [userId], references: [id])
  
  // CLIENT-SPECIFIC PRICING (optional)
  customHourlyRate Decimal?   // Special rate for this client (overrides org default)
  
  // Existing fields
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  projects       Project[]
  contacts       Contact[]
  invoices  Invoice[]
  createdAt      DateTime     @default(now())
}

 model Contact {
  id        String @id @default(uuid())
  client    Client @relation(fields: [clientId], references: [id])
  clientId  String
  name      String
  email     String?
  phone     String?
  position  String?
  isPrimary Boolean @default(false)
}

model Project {
  id             String       @id @default(uuid())
  name           String
  description    String?
  status         String       @default("ACTIVE")
  startDate      DateTime?
  dueDate        DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // PRICING FIELDS
  pricingType    PricingType  @default(HOURLY)     // How this project is billed
  fixedPrice     Decimal?                          // For fixed-price projects
  hourlyRate     Decimal?                          // Override user's default rate
  estimatedHours Int?                              // For project planning
  budget         Decimal?                          // Project budget limit

  createdBy      String
  creator        OrganizationMembership @relation("ProjectCreator", fields: [createdBy], references: [id])
  org            Organization  @relation(fields: [orgId], references: [id])
  orgId          String
  client         Client?      @relation(fields: [clientId], references: [id])
  clientId       String?
  members        ProjectMember[]
  tasks          Task[]
  comments      Comment[] @relation("projectComments")
  attatchments  Attachment[]
  invoices      Invoice[]
  channel  Channel[]
}

model ProjectMember {
  id        String @id @default(uuid())
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  user      User @relation(fields: [userId], references: [id])
  userId    String
  role      ProjectRole
  @@unique([projectId, userId])
}

model Task {
  id            String @id @default(uuid())
  project       Project @relation(fields: [projectId], references: [id])
  projectId     String
  title         String
  description   String?
  status        TaskStatus @default(TODO)
  priority      TaskPriority @default(MEDIUM)
  estimate      Int?
  dueDate       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  assignees     TaskAssignee[]
  dependencies  TaskDependency[] @relation("deps")
  dependents    TaskDependency[] @relation("depsInverse")
  comments      Comment[] @relation("taskcomments")
  createdBy     String
  creator       OrganizationMembership @relation("TaskCreator", fields: [createdBy], references: [id])
  taskLabel     TaskLabel[]
  attatchments  Attachment[]
  timeEntries    TimeEntry[]
  channels      Channel[]
}

model TaskAssignee {
  task   Task @relation(fields: [taskId], references: [id])
  taskId String
  user   User @relation(fields: [userId], references: [id])
  userId String
  @@id([taskId, userId])
}

model TaskDependency {
  id              String @id @default(uuid())
  task            Task   @relation("deps", fields: [taskId], references: [id])
  taskId          String
  dependsOn       Task   @relation("depsInverse", fields: [dependsOnTaskId], references: [id])
  dependsOnTaskId String
}



model Comment {
  id        String @id @default(uuid())
  task      Task?  @relation("taskcomments",fields: [taskId], references: [id])
  taskId    String?
  project   Project? @relation("projectComments", fields: [projectId], references: [id])
  projectId String?
  author    User @relation(fields: [authorId], references: [id])
  authorId  String
  body      String
  createdAt DateTime @default(now())
  editedAt  DateTime?
}


model Label {
  id    String @id @default(uuid())
  org   Organization @relation(fields: [orgId], references: [id])
  orgId String
  name  String
  color String?
  tasks TaskLabel[]
}

model TaskLabel {
  task   Task  @relation(fields: [taskId], references: [id])
  taskId String
  label  Label @relation(fields: [labelId], references: [id])
  labelId String
  @@id([taskId, labelId])
}



model Attachment {
  id         String @id @default(uuid())
  org        Organization @relation(fields: [orgId], references: [id])
  orgId      String
  project    Project? @relation(fields: [projectId], references: [id])
  projectId  String?
  task       Task? @relation(fields: [taskId], references: [id])
  taskId     String?
  uploader   User @relation(fields: [uploaderId], references: [id])
  uploaderId String
  fileUrl    String
  fileName   String
  mimeType   String
  size       Int
  createdAt  DateTime @default(now())
}


model TimeEntry {
  id        String @id @default(uuid())
  task      Task @relation(fields: [taskId], references: [id])
  taskId    String
  user      User @relation(fields: [userId], references: [id])
  userId    String
  startedAt DateTime
  endedAt   DateTime?
  minutes   Int?
  billable  Boolean @default(true)
  note      String?
  
  // INVOICE RELATIONS
  invoiceEntries InvoiceTimeEntry[]
}

// INVOICE MODELS
model Invoice {
  id         String @id @default(uuid())
  org        Organization @relation(fields: [orgId], references: [id])
  orgId      String
  client     Client @relation(fields: [clientId], references: [id])
  clientId   String
  project    Project? @relation(fields: [projectId], references: [id])
  projectId  String?
  invoiceNo  String @unique
  issueDate  DateTime @default(now())
  dueDate    DateTime
  status     InvoiceStatus @default(DRAFT)
  currency   String @default("USD")
  subtotal   Decimal @default(0)
  tax        Decimal @default(0)
  total      Decimal @default(0)
  notes      String?
  
  // RELATIONS
  lines         InvoiceLine[]
  timeEntries   InvoiceTimeEntry[]
  payments      Payment[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model InvoiceLine {
  id          String @id @default(uuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId   String
  description String
  qty         Decimal
  unitPrice   Decimal
  amount      Decimal
  createdAt   DateTime @default(now())
}

model InvoiceTimeEntry {
  id           String @id @default(uuid())
  invoice      Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId    String
  timeEntry    TimeEntry @relation(fields: [timeEntryId], references: [id])
  timeEntryId  String
  hourlyRate   Decimal    // Rate used for this specific entry
  hours        Decimal    // Hours worked (minutes/60)
  amount       Decimal    // hours × hourlyRate
  createdAt    DateTime @default(now())
  
  @@unique([invoiceId, timeEntryId])
}

model Payment {
  id        String @id @default(uuid())
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String
  amount    Decimal
  method    String
  paidAt    DateTime
  reference String?
  notes     String?
  createdAt DateTime @default(now())
}

model Notification {
  id        String @id @default(uuid())
  user      User @relation(fields: [userId], references: [id])
  userId    String
  type      String
  data      Json
  readAt    DateTime?
  createdAt DateTime @default(now())
}



model Channel {
  id        String @id @default(uuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  task      Task? @relation(fields: [taskId], references: [id])
  taskId    String?
  name      String
  type      String // PROJECT | DIRECT | TASK
  members   ChannelMember[]
  messages  Message[]
  createdAt DateTime @default(now())
}

model ChannelMember {
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String
  user      User @relation(fields: [userId], references: [id])
  userId    String
  @@id([channelId, userId])
}

model Message {
  id         String @id @default(uuid())
  channel    Channel @relation(fields: [channelId], references: [id])
  channelId  String
  sender     User @relation(fields: [senderId], references: [id])
  senderId   String
  body       String
  createdAt  DateTime @default(now())
}



// ===========================================
// COMMENTED SCHEMA FOR FUTURE IMPLEMENTATION
// ===========================================




// //
// // ENUMS
// //
// enum OrgRole {
//   OWNER
//   ADMIN
//   MANAGER
//   MEMBER
//   CLIENT
// }

// enum ProjectRole {
//   PM
//   COLLABORATOR
//   VIEWER
//   CLIENT_VIEWER
// }

// enum TaskStatus {
//   TODO
//   IN_PROGRESS
//   DONE
//   BLOCKED
// }

// enum TaskPriority {
//   LOW
//   MEDIUM
//   HIGH
//   URGENT
// }

// enum InvoiceStatus {
//   DRAFT
//   SENT
//   PAID
//   OVERDUE
// }

// //
// // MODELS
// //
// model User {
//   id             String   @id @default(uuid())
//   email          String   @unique
//   passwordHash   String
//   name           String?
//   avatarUrl      String?
//   createdAt      DateTime @default(now())
//   memberships    OrganizationMembership[]
//   projectMembers ProjectMember[]
//   messages       Message[] @relation("UserMessages")
//   notifications  Notification[]
//   timeEntries    TimeEntry[]
//   comments       Comment[]
// }

// model Organization {
//   id        String   @id @default(uuid())
//   name      String
//   slug      String   @unique
//   logoUrl   String?
//   createdAt DateTime @default(now())
//   members   OrganizationMembership[]
//   clients   Client[]
//   projects  Project[]
//   labels    Label[]
//   invoices  Invoice[]
//   auditLogs AuditLog[]
// }

// model OrganizationMembership {
//   id     String @id @default(uuid())
//   org    Organization @relation(fields: [orgId], references: [id])
//   orgId  String
//   user   User @relation(fields: [userId], references: [id])
//   userId String
//   role   OrgRole
//   @@unique([orgId, userId])
// }

// model Client {
//   id        String   @id @default(uuid())
//   org       Organization @relation(fields: [orgId], references: [id])
//   orgId     String
//   name      String
//   website   String?
//   status    String @default("ACTIVE")
//   notes     String?
//   contacts  Contact[]
//   projects  Project[]
//   invoices  Invoice[]
//   createdAt DateTime @default(now())
// }

// model Contact {
//   id        String @id @default(uuid())
//   client    Client @relation(fields: [clientId], references: [id])
//   clientId  String
//   name      String
//   email     String?
//   phone     String?
//   position  String?
//   isPrimary Boolean @default(false)
// }

// model Project {
//   id          String @id @default(uuid())
//   org         Organization @relation(fields: [orgId], references: [id])
//   orgId       String
//   client      Client? @relation(fields: [clientId], references: [id])
//   clientId    String?
//   name        String
//   description String?
//   status      String @default("ACTIVE")
//   startDate   DateTime?
//   dueDate     DateTime?
//   createdBy   String
//   createdAt   DateTime @default(now())
//   members     ProjectMember[]
//   tasks       Task[]
//   milestones  Milestone[]
//   attachments Attachment[]
//   channels    Channel[]
// }

// model ProjectMember {
//   id        String @id @default(uuid())
//   project   Project @relation(fields: [projectId], references: [id])
//   projectId String
//   user      User @relation(fields: [userId], references: [id])
//   userId    String
//   role      ProjectRole
//   @@unique([projectId, userId])
// }

// model Task {
//   id            String @id @default(uuid())
//   project       Project @relation(fields: [projectId], references: [id])
//   projectId     String
//   title         String
//   description   String?
//   status        TaskStatus @default(TODO)
//   priority      TaskPriority @default(MEDIUM)
//   estimate      Int?
//   dueDate       DateTime?
//   createdBy     String
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   assignees     TaskAssignee[]
//   dependencies  TaskDependency[] @relation("deps")
//   dependents    TaskDependency[] @relation("depsInverse")
//   labels        TaskLabel[]
//   comments      Comment[]
//   attachments   Attachment[]
//   subtasks      Subtask[]
//   timeEntries   TimeEntry[]
// }

// model TaskAssignee {
//   task   Task @relation(fields: [taskId], references: [id])
//   taskId String
//   user   User @relation(fields: [userId], references: [id])
//   userId String
//   @@id([taskId, userId])
// }

// model TaskDependency {
//   id              String @id @default(uuid())
//   task            Task   @relation("deps", fields: [taskId], references: [id])
//   taskId          String
//   dependsOn       Task   @relation("depsInverse", fields: [dependsOnTaskId], references: [id])
//   dependsOnTaskId String
// }

// model Label {
//   id    String @id @default(uuid())
//   org   Organization @relation(fields: [orgId], references: [id])
//   orgId String
//   name  String
//   color String?
//   tasks TaskLabel[]
// }

// model TaskLabel {
//   task   Task  @relation(fields: [taskId], references: [id])
//   taskId String
//   label  Label @relation(fields: [labelId], references: [id])
//   labelId String
//   @@id([taskId, labelId])
// }

// model Comment {
//   id        String @id @default(uuid())
//   task      Task?  @relation(fields: [taskId], references: [id])
//   taskId    String?
//   project   Project? @relation(fields: [projectId], references: [id])
//   projectId String?
//   author    User @relation(fields: [authorId], references: [id])
//   authorId  String
//   body      String
//   createdAt DateTime @default(now())
//   editedAt  DateTime?
// }

// model Attachment {
//   id         String @id @default(uuid())
//   org        Organization @relation(fields: [orgId], references: [id])
//   orgId      String
//   project    Project? @relation(fields: [projectId], references: [id])
//   projectId  String?
//   task       Task? @relation(fields: [taskId], references: [id])
//   taskId     String?
//   uploader   User @relation(fields: [uploaderId], references: [id])
//   uploaderId String
//   fileUrl    String
//   fileName   String
//   mimeType   String
//   size       Int
//   createdAt  DateTime @default(now())
// }

// model Channel {
//   id        String @id @default(uuid())
//   org       Organization @relation(fields: [orgId], references: [id])
//   orgId     String
//   project   Project? @relation(fields: [projectId], references: [id])
//   projectId String?
//   name      String
//   type      String // PROJECT | DIRECT | TASK
//   members   ChannelMember[]
//   messages  Message[]
//   createdAt DateTime @default(now())
// }

// model ChannelMember {
//   channel   Channel @relation(fields: [channelId], references: [id])
//   channelId String
//   user      User @relation(fields: [userId], references: [id])
//   userId    String
//   @@id([channelId, userId])
// }

// model Message {
//   id         String @id @default(uuid())
//   channel    Channel @relation(fields: [channelId], references: [id])
//   channelId  String
//   sender     User @relation(fields: [senderId], references: [id])
//   senderId   String
//   body       String
//   createdAt  DateTime @default(now())
// }

// model Notification {
//   id        String @id @default(uuid())
//   user      User @relation(fields: [userId], references: [id])
//   userId    String
//   type      String
//   data      Json
//   readAt    DateTime?
//   createdAt DateTime @default(now())
// }

// model TimeEntry {
//   id        String @id @default(uuid())
//   task      Task @relation(fields: [taskId], references: [id])
//   taskId    String
//   user      User @relation(fields: [userId], references: [id])
//   userId    String
//   startedAt DateTime
//   endedAt   DateTime?
//   minutes   Int?
//   billable  Boolean @default(true)
//   note      String?
// }

// model Invoice {
//   id         String @id @default(uuid())
//   org        Organization @relation(fields: [orgId], references: [id])
//   orgId      String
//   client     Client @relation(fields: [clientId], references: [id])
//   clientId   String
//   invoiceNo  String @unique
//   issueDate  DateTime
//   dueDate    DateTime
//   status     InvoiceStatus @default(DRAFT)
//   currency   String @default("USD")
//   subtotal   Decimal @default(0)
//   tax        Decimal @default(0)
//   total      Decimal @default(0)
//   lines      InvoiceLine[]
//   createdAt  DateTime @default(now())
//   payments   Payment[]
// }

// model InvoiceLine {
//   id          String @id @default(uuid())
//   invoice     Invoice @relation(fields: [invoiceId], references: [id])
//   invoiceId   String
//   description String
//   qty         Decimal
//   unitPrice   Decimal
//   amount      Decimal
// }


// model Payment {
//   id        String @id @default(uuid())
//   invoice   Invoice @relation(fields: [invoiceId], references: [id])
//   invoiceId String
//   amount    Decimal
//   method    String
//   paidAt    DateTime
//   reference String?
// }


// model AuditLog {
//   id         String @id @default(uuid())
//   org        Organization? @relation(fields: [orgId], references: [id])
//   orgId      String?
//   actorId    String?
//   action     String
//   resource   String
//   resourceId String?
//   before     Json?
//   after      Json?
//   createdAt  DateTime @default(now())
// }

// model Milestone {
//   id          String @id @default(uuid())
//   project     Project @relation(fields: [projectId], references: [id])
//   projectId   String
//   title       String
//   description String?
//   startDate   DateTime?
//   dueDate     DateTime?
//   status      String @default("OPEN")
// }

// model Subtask {
//   id        String @id @default(uuid())
//   task      Task @relation(fields: [taskId], references: [id])
//   taskId    String
//   title     String
//   status    TaskStatus @default(TODO)
//   createdAt DateTime @default(now())
// }